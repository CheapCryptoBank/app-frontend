{"version":3,"sources":["constants/base.ts","components/MessageBox.tsx","service/user.ts","components/SignInForm.tsx","components/Navbar.js","App.tsx","serviceWorker.ts","index.tsx","image/NiftyBank.png"],"names":["Color","FontSize","Box","props","status","Success","Failure","Small","MessageBox","messages","messagesText","map","message","index","key","authenticate","email","password","a","unfetch","method","headers","body","JSON","stringify","response","json","data","Error","error","Form","FieldWrapperStyle","EmailFieldWrapper","PasswordFieldWrapper","FieldStyle","Regular","EmailField","PasswordField","SignInButton","PasswordVisibleButton","SignInForm","useState","setEmail","setPassword","setMessages","canSubmit","setCanSubmit","hasError","setHasError","visiblePassword","setVisiblePassword","onChangeField","useCallback","event","target","name","value","onClickButton","currentTarget","validate","values","signInScheme","yup","shape","required","min","matches","abortEarly","useEffect","onSubmit","preventDefault","formValues","errors","placeholder","type","onChange","onClick","icon","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","library","add","faEye","faEyeSlash","Container","App","src","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.747da778.chunk.js","sourcesContent":["export enum Color {\n  Success = '#7BB49F',\n  Failure = '#D47979',\n}\n\nexport enum FontSize {\n  Regular = '15px',\n  Small = '13px',\n}\n","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport { Color, FontSize } from '../constants/base'\n\ntype BoxProps = {\n  messages: string[],\n  status: 'success' | 'failure',\n}\n\ntype BoxColorProps = {\n  status: 'success' | 'failure',\n}\n\nconst Box = styled.div<BoxColorProps>`\n  text-align: center;\n  color: ${(props: BoxColorProps) => props.status === 'success' ? Color.Success : Color.Failure};\n  border: 1px solid ${(props: BoxColorProps) => props.status === 'success' ? Color.Success : Color.Failure};\n  padding: 10px;\n  font-size: ${FontSize.Small};\n  margin: 20px 0;\n`;\n\nconst MessageBox: React.FC<BoxProps> = (props: BoxProps) => {\n  const {messages, status} = props;\n\n  const messagesText = messages.map((message, index) => {\n    return <p key={index}>{message}</p>\n  });\n\n  return (\n    <Box status={status}>\n      {messagesText}\n    </Box>\n  )\n};\n\nexport default MessageBox;","import unfetch from 'unfetch';\n\nexport const authenticate = async (email: string, password: string): Promise<Object> => {\n  const response = await unfetch('https://reqres.in/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password })\n  });\n\n  const data = await response.json();\n\n  if (response.status !== 200) {\n    throw new Error(data.error)\n  }\n\n  return {\n    status: response.status,\n    data,\n  };\n};","import React, {useCallback, useEffect, useState, MouseEvent} from 'react';\nimport styled from '@emotion/styled/macro';\nimport css from '@emotion/css/macro'\nimport * as yup from 'yup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { FontSize } from '../constants/base';\nimport MessageBox from './MessageBox';\nimport { authenticate } from '../service/user';\n\nconst Form = styled.form`\n  font-family: Noto Sans JP;\n  width: 300px;\n  background: #fff;\n  padding: 40px;\n`;\n\nconst FieldWrapperStyle = css`\n  position: relative;\n`;\n\nconst EmailFieldWrapper = styled.div`\n  ${FieldWrapperStyle}\n`;\n\nconst PasswordFieldWrapper = styled.div`\n  ${FieldWrapperStyle}\n`;\n\nconst FieldStyle = css`\n  display: block;\n  width: 100%;\n  height: 40px;\n  font-size: ${FontSize.Regular};\n  padding: 0 10px;\n  margin-bottom: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-sizing: border-box;\n`;\n\nconst EmailField = styled.input`\n  ${FieldStyle}\n`;\n\nconst PasswordField = styled.input`\n  ${FieldStyle}\n  padding: 0 45px 0 10px;\n`;\n\nconst SignInButton = styled.button`\n  background: #333;\n  color: #fff;\n  font-size: ${FontSize.Regular};\n  width: 100%;\n  height: 40px;\n  border-radius: 5px;\n  font-weight: bold;\n`;\n\nconst PasswordVisibleButton = styled.button`\n  font-size: ${FontSize.Regular};\n  color: #333;\n  border: none;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\n\nconst SignInForm: React.FC = () => {\n  const [email, setEmail] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [messages, setMessages] = useState<string[]|null>(null);\n  const [canSubmit, setCanSubmit] = useState<boolean>(false);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [visiblePassword, setVisiblePassword] = useState<boolean>(false);\n\n  const onChangeField = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      switch (event.target.name) {\n        case 'email':\n          setEmail(event.target.value);\n          break;\n        case 'password':\n          setPassword(event.target.value);\n          break;\n      }\n    },\n    [],\n  );\n\n  const onClickButton = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      switch (event.currentTarget.name) {\n        case 'visible_password':\n          setVisiblePassword(!visiblePassword);\n          break;\n      }\n    },\n    [visiblePassword],\n  );\n\n  const validate = async (values: {[key: string]: string}): Promise<void> => {\n    const signInScheme = yup.object().shape({\n      email: yup\n        .string()\n        .email('Email must be a valid.')\n        .required('Email must not be a empty.'),\n      password: yup\n        .string()\n        .min(8, 'Password must be at least 8 characters.')\n        .matches(/^[A-Za-z0-9‚óè!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~]+$/, 'Password must be a valid.')\n        .required('Password must not be a empty.')\n    });\n\n    try {\n      await signInScheme.validate(values, { abortEarly: false });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (canSubmit) {\n        setMessages(null);\n        try {\n          await authenticate(email, password);\n          setEmail('');\n          setPassword('');\n          setMessages(['Sign In Successfully.']);\n          setCanSubmit(false);\n          setHasError(false);\n        } catch (error) {\n          setMessages([error.message]);\n          setCanSubmit(false);\n          setHasError(true);\n        }\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [canSubmit]);\n\n  const onSubmit = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>): Promise<void> => {\n      event.preventDefault();\n\n      const formValues = {\n        email,\n        password,\n      };\n\n      try {\n        await validate(formValues);\n        setCanSubmit(true);\n        setHasError(false);\n      } catch (error) {\n        setMessages(error.errors);\n        setCanSubmit(false);\n        setHasError(true);\n      }\n    },\n    [email, password],\n  );\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n    >\n      <EmailFieldWrapper>\n        <EmailField\n          name='email'\n          placeholder='Email'\n          type='email'\n          value={email}\n          onChange={onChangeField}\n        />\n      </EmailFieldWrapper>\n      <PasswordFieldWrapper>\n        <PasswordField\n          name='password'\n          placeholder='Password'\n          type={visiblePassword ? 'text' : 'password'}\n          value={password}\n          onChange={onChangeField}\n        />\n        <PasswordVisibleButton\n          type='button'\n          name='visible_password'\n          onClick={onClickButton}\n        >\n          <FontAwesomeIcon icon={visiblePassword ? 'eye-slash' : 'eye'} />\n        </PasswordVisibleButton>\n      </PasswordFieldWrapper>\n      {messages &&\n        <MessageBox\n          messages={messages}\n          status={hasError ? 'failure' : 'success'}\n        />}\n      <SignInButton\n        type='submit'\n      >\n        SIGN IN\n      </SignInButton>\n    </Form>\n  )\n};\n\nexport default SignInForm;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport image from \"../image/NiftyBank.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Navbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n        \n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            NiftyBank\n          </Typography>\n         \n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport SignInForm from './components/SignInForm';\nimport styled from '@emotion/styled/macro';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\nimport Navbar from \"./components/Navbar\"\nimport image from \"./image/NiftyBank.png\"\n\nlibrary.add(faEye, faEyeSlash);\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 650px;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar/>\n        <Container>\n          <img src={image}/>\n          <SignInForm/> \n          </Container>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/NiftyBank.f39fa3a8.png\";"],"sourceRoot":""}